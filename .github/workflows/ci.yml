name: CI Pipeline

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Accountability Unit Tests
    runs-on:
      - self-hosted
      - windows
      - x64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Start SQL Server engine
        run: docker run -d --name sqlci -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=${{ secrets.SA_PASSWORD }}" -p 1433:1433 mcr.microsoft.com/mssql/server:2022-latest
        # Single-line avoids stray '\' issues in PowerShell :contentReference[oaicite:4]{index=4}

      - name: Wait for SQL Server to initialize
        run: Start-Sleep -Seconds 30
        # A fixed delay is simpler than quoting a SQLCMD loop in PowerShell :contentReference[oaicite:5]{index=5}

      - name: Build application Docker image
        run: docker build -t accountability-ci-pipeline .
        # BuildKit secrets not needed hereâ€”env vars pass at run time 

      - name: Run pytest integration tests
        run: docker run --rm -e DB_SERVER=host.docker.internal -e DB_USERNAME=sa -e DB_PASSWORD="${{ secrets.SA_PASSWORD }}" -e DB_NAME=master accountability-ci-pipeline
        # Inside Linux containers on Docker Desktop, 'host.docker.internal:1433' reaches your Windows host :contentReference[oaicite:6]{index=6}

      - name: Tear down SQL Server
        if: always()
        run: docker rm -f sqlci

        # Ensures cleanup even on test failures
                                                                           # Clean up the SQL container


# name: CI Pipeline

# on:
#   pull_request:
#     branches:
#       - main

# jobs:
#   build:
#     name: accountability unit tests
#     #runs-on: ubuntu-latest
#     runs-on:
#     - self-hosted
#     - windows
#     - x64
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Build Docker image
#         run: |
#           docker build -t myapp -f ./Dockerfile .

#       - name: Run tests with pytest inside Docker container
#         run: |
#           docker run --rm myapp pytest


  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.event.pull_request.merged == true

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v2

  #     - name: Set up Azure CLI
  #       uses: azure/setup-azurecli@v1
  #       with:
  #         version: '2.28.0'

  #     - name: Install Azure DevOps CLI extension
  #       run: |
  #         az extension add --name azure-devops

  #     - name: Deploy to Azure DevOps
  #       uses: azure/cli-action@v2
  #       with:
  #         azcliversion: '2.28.0'
  #       env:
  #         AZURE_DEVOPS_EXT_PATVAR: ${{ secrets.AZURE_DEVOPS_PAT }}
  #       run: |
  #         az devops login --token $AZURE_DEVOPS_EXT_PATVAR
  #         git remote add azure https://dev.azure.com/your_organization/your_project/_git/your_repo
  #         git push azure main